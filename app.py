import streamlit as st
import psycopg2
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Page configuration
st.set_page_config(
    page_title="ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≠ÿßÿ≥ÿ®ÿ© ÿßŸÑÿ¥ÿßŸÖŸÑ",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Performance optimizations
@st.cache_data(ttl=300)  # Cache for 5 minutes
def get_cached_data(query, params=None):
    """Get cached data from database"""
    return execute_query(query, params, fetch=True)

@st.cache_data(ttl=60)  # Cache for 1 minute
def get_financial_summary_cached():
    """Get cached financial summary"""
    return get_financial_summary()

def get_db_connection():
    """Create and return a fresh database connection"""
    try:
        # Try to get connection from Streamlit secrets (for deployment)
        if 'connections' in st.secrets and 'postgres' in st.secrets['connections']:
            conn = psycopg2.connect(**st.secrets["connections"]["postgres"])
        else:
            # Fallback to environment variables (for local development)
            conn = psycopg2.connect(
                host=os.getenv('DB_HOST', 'localhost'),
                database=os.getenv('DB_NAME', 'taskmanager'),
                user=os.getenv('DB_USER', 'postgres'),
                password=os.getenv('DB_PASSWORD', 'password'),
                port=os.getenv('DB_PORT', '5432')
            )
        return conn
    except Exception as e:
        st.error(f"Database connection failed: {str(e)}")
        return None

def execute_query(query, params=None, fetch=False):
    """Execute a database query with proper connection handling"""
    conn = None
    try:
        conn = get_db_connection()
        if not conn:
            return None
        
        cursor = conn.cursor()
        cursor.execute(query, params)
        
        if fetch:
            result = cursor.fetchall()
        else:
            conn.commit()
            result = True
            
        cursor.close()
        return result
    except Exception as e:
        st.error(f"Database query failed: {str(e)}")
        if conn:
            try:
                conn.rollback()
            except:
                pass
        return None
    finally:
        if conn:
            try:
                conn.close()
            except:
                pass

# Initialize database tables
def init_database():
    """Create tables if they don't exist"""
    
    # ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ
    execute_query("""
        CREATE TABLE IF NOT EXISTS employees (
            id SERIAL PRIMARY KEY,
            name VARCHAR(255) NOT NULL,
            position VARCHAR(255),
            phone VARCHAR(20),
            salary DECIMAL(10,2) DEFAULT 0,
            hire_date DATE DEFAULT CURRENT_DATE,
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±
    execute_query("""
        CREATE TABLE IF NOT EXISTS invoices (
            id SERIAL PRIMARY KEY,
            invoice_number VARCHAR(50) UNIQUE NOT NULL,
            customer_name VARCHAR(255) NOT NULL,
            amount DECIMAL(10,2) NOT NULL,
            tax_amount DECIMAL(10,2) DEFAULT 0,
            total_amount DECIMAL(10,2) NOT NULL,
            payment_method VARCHAR(20) DEFAULT 'cash',
            status VARCHAR(20) DEFAULT 'pending',
            invoice_date DATE DEFAULT CURRENT_DATE,
            due_date DATE,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ÿßŸÑÿ±Ÿàÿßÿ™ÿ®
    execute_query("""
        CREATE TABLE IF NOT EXISTS salaries (
            id SERIAL PRIMARY KEY,
            employee_id INTEGER REFERENCES employees(id),
            month INTEGER NOT NULL,
            year INTEGER NOT NULL,
            basic_salary DECIMAL(10,2) NOT NULL,
            overtime DECIMAL(10,2) DEFAULT 0,
            bonuses DECIMAL(10,2) DEFAULT 0,
            deductions DECIMAL(10,2) DEFAULT 0,
            net_salary DECIMAL(10,2) NOT NULL,
            payment_date DATE,
            status VARCHAR(20) DEFAULT 'pending',
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ
    execute_query("""
        CREATE TABLE IF NOT EXISTS expenses (
            id SERIAL PRIMARY KEY,
            expense_type VARCHAR(50) NOT NULL,
            category VARCHAR(100) NOT NULL,
            amount DECIMAL(10,2) NOT NULL,
            description TEXT,
            payment_method VARCHAR(20) DEFAULT 'cash',
            is_fixed BOOLEAN DEFAULT FALSE,
            expense_date DATE DEFAULT CURRENT_DATE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™
    execute_query("""
        CREATE TABLE IF NOT EXISTS withdrawals (
            id SERIAL PRIMARY KEY,
            amount DECIMAL(10,2) NOT NULL,
            reason TEXT NOT NULL,
            withdrawal_date DATE DEFAULT CURRENT_DATE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ÿßŸÑÿ∞ŸÖŸÖ
    execute_query("""
        CREATE TABLE IF NOT EXISTS accounts_receivable (
            id SERIAL PRIMARY KEY,
            customer_name VARCHAR(255) NOT NULL,
            amount DECIMAL(10,2) NOT NULL,
            due_date DATE,
            status VARCHAR(20) DEFAULT 'pending',
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä
    execute_query("""
        CREATE TABLE IF NOT EXISTS daily_closing (
            id SERIAL PRIMARY KEY,
            closing_date DATE UNIQUE NOT NULL,
            cash_start DECIMAL(10,2) DEFAULT 0,
            cash_end DECIMAL(10,2) DEFAULT 0,
            visa_start DECIMAL(10,2) DEFAULT 0,
            visa_end DECIMAL(10,2) DEFAULT 0,
            total_sales DECIMAL(10,2) DEFAULT 0,
            total_expenses DECIMAL(10,2) DEFAULT 0,
            total_withdrawals DECIMAL(10,2) DEFAULT 0,
            net_amount DECIMAL(10,2) DEFAULT 0,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™
    execute_query("""
        CREATE TABLE IF NOT EXISTS deposits (
            id SERIAL PRIMARY KEY,
            amount DECIMAL(10,2) NOT NULL,
            deposit_type VARCHAR(50) NOT NULL,
            bank_name VARCHAR(255),
            account_number VARCHAR(100),
            deposit_date DATE DEFAULT CURRENT_DATE,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®
    execute_query("""
        CREATE TABLE IF NOT EXISTS account_statement (
            id SERIAL PRIMARY KEY,
            transaction_date DATE NOT NULL,
            description TEXT NOT NULL,
            debit DECIMAL(10,2) DEFAULT 0,
            credit DECIMAL(10,2) DEFAULT 0,
            balance DECIMAL(10,2) NOT NULL,
            transaction_type VARCHAR(50) NOT NULL,
            reference_id INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

# CRUD operations for accounting system

# ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ
def add_employee(name, position, phone, salary, hire_date):
    """ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ ÿ¨ÿØŸäÿØ"""
    return execute_query("""
        INSERT INTO employees (name, position, phone, salary, hire_date)
        VALUES (%s, %s, %s, %s, %s)
    """, (name, position, phone, salary, hire_date))

def get_employees():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ"""
    return get_cached_data("""
        SELECT id, name, position, phone, salary, hire_date, is_active
        FROM employees
        ORDER BY name
    """) or []

# ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±
def add_invoice(invoice_number, customer_name, amount, tax_amount, total_amount, payment_method, due_date, notes):
    """ÿ•ÿ∂ÿßŸÅÿ© ŸÅÿßÿ™Ÿàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©"""
    return execute_query("""
        INSERT INTO invoices (invoice_number, customer_name, amount, tax_amount, total_amount, payment_method, due_date, notes)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
    """, (invoice_number, customer_name, amount, tax_amount, total_amount, payment_method, due_date, notes))

def get_invoices():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±"""
    return get_cached_data("""
        SELECT id, invoice_number, customer_name, amount, tax_amount, total_amount, payment_method, status, invoice_date, due_date
        FROM invoices
        ORDER BY invoice_date DESC
    """) or []

# ÿßŸÑÿ±Ÿàÿßÿ™ÿ®
def add_salary(employee_id, month, year, basic_salary, overtime, bonuses, deductions, net_salary, payment_date, notes):
    """ÿ•ÿ∂ÿßŸÅÿ© ÿ±ÿßÿ™ÿ® ŸÖŸàÿ∏ŸÅ"""
    return execute_query("""
        INSERT INTO salaries (employee_id, month, year, basic_salary, overtime, bonuses, deductions, net_salary, payment_date, notes)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, (employee_id, month, year, basic_salary, overtime, bonuses, deductions, net_salary, payment_date, notes))

def get_salaries():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿ±Ÿàÿßÿ™ÿ®"""
    return get_cached_data("""
        SELECT s.id, e.name, s.month, s.year, s.basic_salary, s.overtime, s.bonuses, s.deductions, s.net_salary, s.payment_date, s.status
        FROM salaries s
        JOIN employees e ON s.employee_id = e.id
        ORDER BY s.year DESC, s.month DESC
    """) or []

# ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ
def add_expense(expense_type, category, amount, description, payment_method, is_fixed, expense_date):
    """ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿµÿ±ŸàŸÅ ÿ¨ÿØŸäÿØ"""
    return execute_query("""
        INSERT INTO expenses (expense_type, category, amount, description, payment_method, is_fixed, expense_date)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
    """, (expense_type, category, amount, description, payment_method, is_fixed, expense_date))

def get_expenses():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ"""
    return get_cached_data("""
        SELECT id, expense_type, category, amount, description, payment_method, is_fixed, expense_date
        FROM expenses
        ORDER BY expense_date DESC
    """) or []

# ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™
def add_withdrawal(amount, reason, withdrawal_date):
    """ÿ•ÿ∂ÿßŸÅÿ© ÿ≥ÿ≠ÿ® ÿ¨ÿØŸäÿØ"""
    return execute_query("""
        INSERT INTO withdrawals (amount, reason, withdrawal_date)
        VALUES (%s, %s, %s)
    """, (amount, reason, withdrawal_date))

def get_withdrawals():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™"""
    return get_cached_data("""
        SELECT id, amount, reason, withdrawal_date
        FROM withdrawals
        ORDER BY withdrawal_date DESC
    """) or []

# ÿßŸÑÿ∞ŸÖŸÖ
def add_account_receivable(customer_name, amount, due_date, notes):
    """ÿ•ÿ∂ÿßŸÅÿ© ÿ∞ŸÖÿ© ÿ¨ÿØŸäÿØÿ©"""
    return execute_query("""
        INSERT INTO accounts_receivable (customer_name, amount, due_date, notes)
        VALUES (%s, %s, %s, %s)
    """, (customer_name, amount, due_date, notes))

def get_accounts_receivable():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿ∞ŸÖŸÖ"""
    return get_cached_data("""
        SELECT id, customer_name, amount, due_date, status, notes
        FROM accounts_receivable
        ORDER BY due_date
    """) or []

# ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä
def add_daily_closing(closing_date, cash_start, cash_end, visa_start, visa_end, total_sales, total_expenses, total_withdrawals, net_amount, notes):
    """ÿ•ÿ∂ÿßŸÅÿ© ÿ•ÿ∫ŸÑÿßŸÇ ŸäŸàŸÖŸä"""
    return execute_query("""
        INSERT INTO daily_closing (closing_date, cash_start, cash_end, visa_start, visa_end, total_sales, total_expenses, total_withdrawals, net_amount, notes)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    """, (closing_date, cash_start, cash_end, visa_start, visa_end, total_sales, total_expenses, total_withdrawals, net_amount, notes))

def get_daily_closings():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ©"""
    return get_cached_data("""
        SELECT id, closing_date, cash_start, cash_end, visa_start, visa_end, total_sales, total_expenses, total_withdrawals, net_amount
        FROM daily_closing
        ORDER BY closing_date DESC
    """) or []

# ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™
def add_deposit(amount, deposit_type, bank_name, account_number, deposit_date, notes):
    """ÿ•ÿ∂ÿßŸÅÿ© ÿ•ŸäÿØÿßÿπ ÿ¨ÿØŸäÿØ"""
    return execute_query("""
        INSERT INTO deposits (amount, deposit_type, bank_name, account_number, deposit_date, notes)
        VALUES (%s, %s, %s, %s, %s, %s)
    """, (amount, deposit_type, bank_name, account_number, deposit_date, notes))

def get_deposits():
    """ÿ¨ŸÑÿ® ÿ¨ŸÖŸäÿπ ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™"""
    return get_cached_data("""
        SELECT id, amount, deposit_type, bank_name, account_number, deposit_date, notes
        FROM deposits
        ORDER BY deposit_date DESC
    """) or []

# ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®
def add_account_statement_entry(transaction_date, description, debit, credit, balance, transaction_type, reference_id):
    """ÿ•ÿ∂ÿßŸÅÿ© ŸÇŸäÿØ ŸÅŸä ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®"""
    return execute_query("""
        INSERT INTO account_statement (transaction_date, description, debit, credit, balance, transaction_type, reference_id)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
    """, (transaction_date, description, debit, credit, balance, transaction_type, reference_id))

def get_account_statement():
    """ÿ¨ŸÑÿ® ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®"""
    return get_cached_data("""
        SELECT id, transaction_date, description, debit, credit, balance, transaction_type, reference_id
        FROM account_statement
        ORDER BY transaction_date DESC
    """) or []

# ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™
def get_financial_summary():
    """ÿ¨ŸÑÿ® ŸÖŸÑÿÆÿµ ŸÖÿßŸÑŸä"""
    result = execute_query("""
        SELECT 
            (SELECT COALESCE(SUM(total_amount), 0) FROM invoices WHERE status = 'paid') as total_sales,
            (SELECT COALESCE(SUM(amount), 0) FROM expenses) as total_expenses,
            (SELECT COALESCE(SUM(amount), 0) FROM withdrawals) as total_withdrawals,
            (SELECT COALESCE(SUM(net_salary), 0) FROM salaries WHERE status = 'paid') as total_salaries,
            (SELECT COALESCE(SUM(amount), 0) FROM deposits) as total_deposits
    """, fetch=True)
    return result[0] if result and len(result) > 0 else (0, 0, 0, 0, 0)

# Main app
def main():
    st.title("üí∞ ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ≠ÿßÿ≥ÿ®ÿ© ÿßŸÑÿ¥ÿßŸÖŸÑ")
    st.markdown("---")
    
    # Initialize database
    init_database()
    
    # Sidebar navigation
    with st.sidebar:
        st.header("üìã ÿßŸÑŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©")
        
        page = st.selectbox(
            "ÿßÿÆÿ™ÿ± ÿßŸÑÿµŸÅÿ≠ÿ©",
            [
                "üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©",
                "üë• ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ",
                "üìÑ ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±",
                "üí∞ ÿßŸÑÿ±Ÿàÿßÿ™ÿ®",
                "üí∏ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ",
                "üèß ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™",
                "üìä ÿßŸÑÿ∞ŸÖŸÖ",
                "üîí ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä",
                "üè¶ ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™",
                "üìã ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®"
            ]
        )
    
    # Main content area based on selected page
    if page == "üè† ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©":
        show_dashboard()
    elif page == "üë• ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ":
        show_employees()
    elif page == "üìÑ ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±":
        show_invoices()
    elif page == "üí∞ ÿßŸÑÿ±Ÿàÿßÿ™ÿ®":
        show_salaries()
    elif page == "üí∏ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ":
        show_expenses()
    elif page == "üèß ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™":
        show_withdrawals()
    elif page == "üìä ÿßŸÑÿ∞ŸÖŸÖ":
        show_accounts_receivable()
    elif page == "üîí ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä":
        show_daily_closing()
    elif page == "üè¶ ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™":
        show_deposits()
    elif page == "üìã ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®":
        show_account_statement()

def show_dashboard():
    """ÿπÿ±ÿ∂ ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©"""
    st.header("üìä ŸÑŸàÿ≠ÿ© ÿßŸÑÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©")
    
    # Get financial summary with caching
    total_sales, total_expenses, total_withdrawals, total_salaries, total_deposits = get_financial_summary_cached()
    
    # Display key metrics
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üí∞ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™", f"{total_sales:,.2f} ÿØ.ŸÉ")
    
    with col2:
        st.metric("üí∏ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ", f"{total_expenses:,.2f} ÿØ.ŸÉ")
    
    with col3:
        st.metric("üèß ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™", f"{total_withdrawals:,.2f} ÿØ.ŸÉ")
    
    with col4:
        st.metric("üë• ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ±Ÿàÿßÿ™ÿ®", f"{total_salaries:,.2f} ÿØ.ŸÉ")
    
    with col5:
        st.metric("üè¶ ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™", f"{total_deposits:,.2f} ÿØ.ŸÉ")
    
    # Net profit calculation
    net_profit = total_sales - total_expenses - total_withdrawals - total_salaries
    st.metric("üìà ÿµÿßŸÅŸä ÿßŸÑÿ±ÿ®ÿ≠", f"{net_profit:,.2f} ÿØ.ŸÉ", delta=f"{net_profit:,.2f}")
    
    # Charts
    col1, col2 = st.columns(2)
    
    with col1:
        # Income vs Expenses chart
        fig = go.Figure(data=[
            go.Bar(name='ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™', x=['ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™', 'ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™'], y=[total_sales, total_deposits], marker_color='green'),
            go.Bar(name='ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ', x=['ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ', 'ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™', 'ÿßŸÑÿ±Ÿàÿßÿ™ÿ®'], y=[total_expenses, total_withdrawals, total_salaries], marker_color='red')
        ])
        fig.update_layout(title='ÿßŸÑÿ•Ÿäÿ±ÿßÿØÿßÿ™ ŸÖŸÇÿßÿ®ŸÑ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ', barmode='group')
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Pie chart for expenses breakdown
        if total_expenses > 0 or total_withdrawals > 0 or total_salaries > 0:
            fig = px.pie(
                values=[total_expenses, total_withdrawals, total_salaries],
                names=['ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ', 'ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™', 'ÿßŸÑÿ±Ÿàÿßÿ™ÿ®'],
                title='ÿ™Ÿàÿ≤Ÿäÿπ ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ'
            )
            st.plotly_chart(fig, use_container_width=True)

def show_employees():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ"""
    st.header("üë• ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ")
    
    # Add new employee form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ ÿ¨ÿØŸäÿØ"):
        with st.form("add_employee_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                name = st.text_input("ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ", placeholder="ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ...")
                position = st.text_input("ÿßŸÑŸÖŸÜÿµÿ®", placeholder="ÿ£ÿØÿÆŸÑ ÿßŸÑŸÖŸÜÿµÿ®...")
            
            with col2:
                phone = st.text_input("ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ", placeholder="ÿ£ÿØÿÆŸÑ ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ...")
                salary = st.number_input("ÿßŸÑÿ±ÿßÿ™ÿ®", min_value=0.0, step=0.01)
            
            hire_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ™Ÿàÿ∏ŸäŸÅ", value=date.today())
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅ", type="primary")
            
            if submitted and name:
                if add_employee(name, position, phone, salary, hire_date):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display employees
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ")
    employees = get_employees()
    
    if employees:
        df = pd.DataFrame(employees, columns=['ID', 'ÿßŸÑÿßÿ≥ŸÖ', 'ÿßŸÑŸÖŸÜÿµÿ®', 'ÿßŸÑŸáÿßÿ™ŸÅ', 'ÿßŸÑÿ±ÿßÿ™ÿ®', 'ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ™Ÿàÿ∏ŸäŸÅ', 'ŸÜÿ¥ÿ∑'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸàÿ∏ŸÅŸäŸÜ ŸÖÿ≥ÿ¨ŸÑŸäŸÜ ÿ®ÿπÿØ.")

def show_invoices():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±"""
    st.header("üìÑ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±")
    
    # Add new invoice form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÅÿßÿ™Ÿàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©"):
        with st.form("add_invoice_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                invoice_number = st.text_input("ÿ±ŸÇŸÖ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©", placeholder="ÿ£ÿØÿÆŸÑ ÿ±ŸÇŸÖ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©...")
                customer_name = st.text_input("ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ", placeholder="ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ...")
                amount = st.number_input("ÿßŸÑŸÖÿ®ŸÑÿ∫", min_value=0.0, step=0.01)
                tax_amount = st.number_input("ŸÖÿ®ŸÑÿ∫ ÿßŸÑÿ∂ÿ±Ÿäÿ®ÿ©", min_value=0.0, step=0.01)
            
            with col2:
                total_amount = st.number_input("ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä", min_value=0.0, step=0.01)
                payment_method = st.selectbox("ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ", ["ŸÜŸÇÿØÿßŸã", "ŸÅŸäÿ≤ÿß", "ÿ¥ŸäŸÉ", "ÿ™ÿ≠ŸàŸäŸÑ"])
                due_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßÿ≥ÿ™ÿ≠ŸÇÿßŸÇ")
                notes = st.text_area("ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™", placeholder="ÿ£ÿØÿÆŸÑ ÿ£Ÿä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™...")
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ŸÅÿßÿ™Ÿàÿ±ÿ©", type="primary")
            
            if submitted and invoice_number and customer_name:
                if add_invoice(invoice_number, customer_name, amount, tax_amount, total_amount, payment_method, due_date, notes):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ© ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display invoices
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±")
    invoices = get_invoices()
    
    if invoices:
        df = pd.DataFrame(invoices, columns=['ID', 'ÿ±ŸÇŸÖ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©', 'ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ', 'ÿßŸÑŸÖÿ®ŸÑÿ∫', 'ÿßŸÑÿ∂ÿ±Ÿäÿ®ÿ©', 'ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä', 'ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ', 'ÿßŸÑÿ≠ÿßŸÑÿ©', 'ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÅÿßÿ™Ÿàÿ±ÿ©', 'ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßÿ≥ÿ™ÿ≠ŸÇÿßŸÇ'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÅŸàÿßÿ™Ÿäÿ± ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

def show_salaries():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ±Ÿàÿßÿ™ÿ®"""
    st.header("üí∞ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ±Ÿàÿßÿ™ÿ®")
    
    # Add new salary form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ÿ±ÿßÿ™ÿ® ŸÖŸàÿ∏ŸÅ"):
        with st.form("add_salary_form"):
            employees = get_employees()
            if employees:
                employee_options = {f"{emp[1]} (ID: {emp[0]})": emp[0] for emp in employees}
                selected_employee = st.selectbox("ÿßÿÆÿ™ÿ± ÿßŸÑŸÖŸàÿ∏ŸÅ", list(employee_options.keys()))
                employee_id = employee_options[selected_employee]
            else:
                st.warning("ŸÑÿß ŸäŸàÿ¨ÿØ ŸÖŸàÿ∏ŸÅŸäŸÜ ŸÖÿ≥ÿ¨ŸÑŸäŸÜ. Ÿäÿ±ÿ¨Ÿâ ÿ•ÿ∂ÿßŸÅÿ© ŸÖŸàÿ∏ŸÅŸäŸÜ ÿ£ŸàŸÑÿßŸã.")
                employee_id = None
            
            col1, col2 = st.columns(2)
            
            with col1:
                month = st.selectbox("ÿßŸÑÿ¥Ÿáÿ±", list(range(1, 13)))
                year = st.number_input("ÿßŸÑÿ≥ŸÜÿ©", min_value=2020, max_value=2030, value=date.today().year)
                basic_salary = st.number_input("ÿßŸÑÿ±ÿßÿ™ÿ® ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä", min_value=0.0, step=0.01)
                overtime = st.number_input("ÿ≥ÿßÿπÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©", min_value=0.0, step=0.01)
            
            with col2:
                bonuses = st.number_input("ÿßŸÑŸÖŸÉÿßŸÅÿ¢ÿ™", min_value=0.0, step=0.01)
                deductions = st.number_input("ÿßŸÑÿÆÿµŸàŸÖÿßÿ™", min_value=0.0, step=0.01)
                net_salary = st.number_input("ÿµÿßŸÅŸä ÿßŸÑÿ±ÿßÿ™ÿ®", min_value=0.0, step=0.01)
                payment_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿØŸÅÿπ")
            
            notes = st.text_area("ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™", placeholder="ÿ£ÿØÿÆŸÑ ÿ£Ÿä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™...")
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ÿ±ÿßÿ™ÿ®", type="primary")
            
            if submitted and employee_id:
                if add_salary(employee_id, month, year, basic_salary, overtime, bonuses, deductions, net_salary, payment_date, notes):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ±ÿßÿ™ÿ® ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ±ÿßÿ™ÿ®. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display salaries
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ±Ÿàÿßÿ™ÿ®")
    salaries = get_salaries()
    
    if salaries:
        df = pd.DataFrame(salaries, columns=['ID', 'ÿßÿ≥ŸÖ ÿßŸÑŸÖŸàÿ∏ŸÅ', 'ÿßŸÑÿ¥Ÿáÿ±', 'ÿßŸÑÿ≥ŸÜÿ©', 'ÿßŸÑÿ±ÿßÿ™ÿ® ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä', 'ÿ≥ÿßÿπÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©', 'ÿßŸÑŸÖŸÉÿßŸÅÿ¢ÿ™', 'ÿßŸÑÿÆÿµŸàŸÖÿßÿ™', 'ÿµÿßŸÅŸä ÿßŸÑÿ±ÿßÿ™ÿ®', 'ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿØŸÅÿπ', 'ÿßŸÑÿ≠ÿßŸÑÿ©'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ±Ÿàÿßÿ™ÿ® ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

def show_expenses():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ"""
    st.header("üí∏ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ")
    
    # Add new expense form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿµÿ±ŸàŸÅ ÿ¨ÿØŸäÿØ"):
        with st.form("add_expense_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                expense_type = st.selectbox("ŸÜŸàÿπ ÿßŸÑŸÖÿµÿ±ŸàŸÅ", ["ÿ´ÿßÿ®ÿ™", "ÿ∫Ÿäÿ± ÿ´ÿßÿ®ÿ™"])
                category = st.text_input("ÿßŸÑŸÅÿ¶ÿ©", placeholder="ÿ£ÿØÿÆŸÑ ŸÅÿ¶ÿ© ÿßŸÑŸÖÿµÿ±ŸàŸÅ...")
                amount = st.number_input("ÿßŸÑŸÖÿ®ŸÑÿ∫", min_value=0.0, step=0.01)
                description = st.text_area("ÿßŸÑŸàÿµŸÅ", placeholder="ÿ£ÿØÿÆŸÑ ŸàÿµŸÅ ÿßŸÑŸÖÿµÿ±ŸàŸÅ...")
            
            with col2:
                payment_method = st.selectbox("ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ", ["ŸÜŸÇÿØÿßŸã", "ŸÅŸäÿ≤ÿß", "ÿ¥ŸäŸÉ", "ÿ™ÿ≠ŸàŸäŸÑ"])
                is_fixed = st.checkbox("ŸÖÿµÿ±ŸàŸÅ ÿ´ÿßÿ®ÿ™")
                expense_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖÿµÿ±ŸàŸÅ", value=date.today())
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ŸÖÿµÿ±ŸàŸÅ", type="primary")
            
            if submitted and category and amount:
                if add_expense(expense_type, category, amount, description, payment_method, is_fixed, expense_date):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿµÿ±ŸàŸÅ ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿµÿ±ŸàŸÅ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display expenses
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ")
    expenses = get_expenses()
    
    if expenses:
        df = pd.DataFrame(expenses, columns=['ID', 'ÿßŸÑŸÜŸàÿπ', 'ÿßŸÑŸÅÿ¶ÿ©', 'ÿßŸÑŸÖÿ®ŸÑÿ∫', 'ÿßŸÑŸàÿµŸÅ', 'ÿ∑ÿ±ŸäŸÇÿ© ÿßŸÑÿØŸÅÿπ', 'ÿ´ÿßÿ®ÿ™', 'ÿßŸÑÿ™ÿßÿ±ŸäÿÆ'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÖÿµÿßÿ±ŸäŸÅ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

def show_withdrawals():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™"""
    st.header("üèß ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™")
    
    # Add new withdrawal form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ÿ≥ÿ≠ÿ® ÿ¨ÿØŸäÿØ"):
        with st.form("add_withdrawal_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                amount = st.number_input("ÿßŸÑŸÖÿ®ŸÑÿ∫", min_value=0.0, step=0.01)
                reason = st.text_area("ÿßŸÑÿ≥ÿ®ÿ®", placeholder="ÿ£ÿØÿÆŸÑ ÿ≥ÿ®ÿ® ÿßŸÑÿ≥ÿ≠ÿ®...")
            
            with col2:
                withdrawal_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ≥ÿ≠ÿ®", value=date.today())
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ÿ≥ÿ≠ÿ®", type="primary")
            
            if submitted and amount and reason:
                if add_withdrawal(amount, reason, withdrawal_date):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥ÿ≠ÿ® ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ≥ÿ≠ÿ®. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display withdrawals
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™")
    withdrawals = get_withdrawals()
    
    if withdrawals:
        df = pd.DataFrame(withdrawals, columns=['ID', 'ÿßŸÑŸÖÿ®ŸÑÿ∫', 'ÿßŸÑÿ≥ÿ®ÿ®', 'ÿßŸÑÿ™ÿßÿ±ŸäÿÆ'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ≥ÿ≠Ÿàÿ®ÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

def show_accounts_receivable():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ∞ŸÖŸÖ"""
    st.header("üìä ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ∞ŸÖŸÖ")
    
    # Add new account receivable form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ÿ∞ŸÖÿ© ÿ¨ÿØŸäÿØÿ©"):
        with st.form("add_account_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                customer_name = st.text_input("ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ", placeholder="ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ...")
                amount = st.number_input("ÿßŸÑŸÖÿ®ŸÑÿ∫", min_value=0.0, step=0.01)
            
            with col2:
                due_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßÿ≥ÿ™ÿ≠ŸÇÿßŸÇ")
                notes = st.text_area("ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™", placeholder="ÿ£ÿØÿÆŸÑ ÿ£Ÿä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™...")
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ÿ∞ŸÖÿ©", type="primary")
            
            if submitted and customer_name and amount:
                if add_account_receivable(customer_name, amount, due_date, notes):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ∞ŸÖÿ© ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ∞ŸÖÿ©. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display accounts receivable
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ∞ŸÖŸÖ")
    accounts = get_accounts_receivable()
    
    if accounts:
        df = pd.DataFrame(accounts, columns=['ID', 'ÿßÿ≥ŸÖ ÿßŸÑÿπŸÖŸäŸÑ', 'ÿßŸÑŸÖÿ®ŸÑÿ∫', 'ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿßÿ≥ÿ™ÿ≠ŸÇÿßŸÇ', 'ÿßŸÑÿ≠ÿßŸÑÿ©', 'ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ∞ŸÖŸÖ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

def show_daily_closing():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä"""
    st.header("üîí ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä")
    
    # Add new daily closing form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ÿ•ÿ∫ŸÑÿßŸÇ ŸäŸàŸÖŸä ÿ¨ÿØŸäÿØ"):
        with st.form("add_closing_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                closing_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ", value=date.today())
                cash_start = st.number_input("ÿ±ÿµŸäÿØ ÿßŸÑŸÉÿßÿ¥ ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿä", min_value=0.0, step=0.01)
                cash_end = st.number_input("ÿ±ÿµŸäÿØ ÿßŸÑŸÉÿßÿ¥ ÿßŸÑŸÜŸáÿßÿ¶Ÿä", min_value=0.0, step=0.01)
                visa_start = st.number_input("ÿ±ÿµŸäÿØ ÿßŸÑŸÅŸäÿ≤ÿß ÿßŸÑÿßÿ®ÿ™ÿØÿßÿ¶Ÿä", min_value=0.0, step=0.01)
                visa_end = st.number_input("ÿ±ÿµŸäÿØ ÿßŸÑŸÅŸäÿ≤ÿß ÿßŸÑŸÜŸáÿßÿ¶Ÿä", min_value=0.0, step=0.01)
            
            with col2:
                total_sales = st.number_input("ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™", min_value=0.0, step=0.01)
                total_expenses = st.number_input("ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ", min_value=0.0, step=0.01)
                total_withdrawals = st.number_input("ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™", min_value=0.0, step=0.01)
                net_amount = st.number_input("ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑÿµÿßŸÅŸä", min_value=0.0, step=0.01)
                notes = st.text_area("ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™", placeholder="ÿ£ÿØÿÆŸÑ ÿ£Ÿä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™...")
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ÿ•ÿ∫ŸÑÿßŸÇ ŸäŸàŸÖŸä", type="primary")
            
            if submitted and closing_date:
                if add_daily_closing(closing_date, cash_start, cash_end, visa_start, visa_end, total_sales, total_expenses, total_withdrawals, net_amount, notes):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇ ÿßŸÑŸäŸàŸÖŸä. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display daily closings
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ•ÿ∫ŸÑÿßŸÇÿßÿ™ ÿßŸÑŸäŸàŸÖŸäÿ©")
    closings = get_daily_closings()
    
    if closings:
        df = pd.DataFrame(closings, columns=['ID', 'ÿßŸÑÿ™ÿßÿ±ŸäÿÆ', 'ŸÉÿßÿ¥ ÿßÿ®ÿ™ÿØÿßÿ¶Ÿä', 'ŸÉÿßÿ¥ ŸÜŸáÿßÿ¶Ÿä', 'ŸÅŸäÿ≤ÿß ÿßÿ®ÿ™ÿØÿßÿ¶Ÿä', 'ŸÅŸäÿ≤ÿß ŸÜŸáÿßÿ¶Ÿä', 'ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿ®Ÿäÿπÿßÿ™', 'ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑŸÖÿµÿßÿ±ŸäŸÅ', 'ÿ•ÿ¨ŸÖÿßŸÑŸä ÿßŸÑÿ≥ÿ≠Ÿàÿ®ÿßÿ™', 'ÿßŸÑŸÖÿ®ŸÑÿ∫ ÿßŸÑÿµÿßŸÅŸä'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ•ÿ∫ŸÑÿßŸÇÿßÿ™ ŸäŸàŸÖŸäÿ© ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

def show_deposits():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™"""
    st.header("üè¶ ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™")
    
    # Add new deposit form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ÿ•ŸäÿØÿßÿπ ÿ¨ÿØŸäÿØ"):
        with st.form("add_deposit_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                amount = st.number_input("ÿßŸÑŸÖÿ®ŸÑÿ∫", min_value=0.0, step=0.01)
                deposit_type = st.selectbox("ŸÜŸàÿπ ÿßŸÑÿ•ŸäÿØÿßÿπ", ["ŸàÿØŸäÿπÿ©", "ÿ™ÿ≠ŸàŸäŸÑ", "ÿ¥ŸäŸÉ", "ÿ£ÿÆÿ±Ÿâ"])
                bank_name = st.text_input("ÿßÿ≥ŸÖ ÿßŸÑÿ®ŸÜŸÉ", placeholder="ÿ£ÿØÿÆŸÑ ÿßÿ≥ŸÖ ÿßŸÑÿ®ŸÜŸÉ...")
            
            with col2:
                account_number = st.text_input("ÿ±ŸÇŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ®", placeholder="ÿ£ÿØÿÆŸÑ ÿ±ŸÇŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ®...")
                deposit_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ŸäÿØÿßÿπ", value=date.today())
                notes = st.text_area("ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™", placeholder="ÿ£ÿØÿÆŸÑ ÿ£Ÿä ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™...")
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ÿ•ŸäÿØÿßÿπ", type="primary")
            
            if submitted and amount:
                if add_deposit(amount, deposit_type, bank_name, account_number, deposit_date, notes):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ•ŸäÿØÿßÿπ ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ•ŸäÿØÿßÿπ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display deposits
    st.subheader("üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿ•ŸäÿØÿßÿπÿßÿ™")
    deposits = get_deposits()
    
    if deposits:
        df = pd.DataFrame(deposits, columns=['ID', 'ÿßŸÑŸÖÿ®ŸÑÿ∫', 'ÿßŸÑŸÜŸàÿπ', 'ÿßÿ≥ŸÖ ÿßŸÑÿ®ŸÜŸÉ', 'ÿ±ŸÇŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ®', 'ÿßŸÑÿ™ÿßÿ±ŸäÿÆ', 'ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ•ŸäÿØÿßÿπÿßÿ™ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

def show_account_statement():
    """ÿπÿ±ÿ∂ ÿµŸÅÿ≠ÿ© ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®"""
    st.header("üìã ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®")
    
    # Add new account statement entry form
    with st.expander("‚ûï ÿ•ÿ∂ÿßŸÅÿ© ŸÇŸäÿØ ÿ¨ÿØŸäÿØ"):
        with st.form("add_statement_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                transaction_date = st.date_input("ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©", value=date.today())
                description = st.text_area("ÿßŸÑŸàÿµŸÅ", placeholder="ÿ£ÿØÿÆŸÑ ŸàÿµŸÅ ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©...")
                debit = st.number_input("ŸÖÿØŸäŸÜ", min_value=0.0, step=0.01)
            
            with col2:
                credit = st.number_input("ÿØÿßÿ¶ŸÜ", min_value=0.0, step=0.01)
                balance = st.number_input("ÿßŸÑÿ±ÿµŸäÿØ", min_value=0.0, step=0.01)
                transaction_type = st.selectbox("ŸÜŸàÿπ ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©", ["ÿ®Ÿäÿπ", "ÿ¥ÿ±ÿßÿ°", "ŸÖÿµÿ±ŸàŸÅ", "ÿ•Ÿäÿ±ÿßÿØ", "ÿ™ÿ≠ŸàŸäŸÑ", "ÿ£ÿÆÿ±Ÿâ"])
                reference_id = st.number_input("ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±ÿ¨ÿπ", min_value=0, step=1)
            
            submitted = st.form_submit_button("ÿ•ÿ∂ÿßŸÅÿ© ŸÇŸäÿØ", type="primary")
            
            if submitted and description:
                if add_account_statement_entry(transaction_date, description, debit, credit, balance, transaction_type, reference_id):
                    st.success("ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÇŸäÿØ ÿ®ŸÜÿ¨ÿßÿ≠!")
                    # Clear cache and refresh
                    get_cached_data.clear()
                    st.rerun()
                else:
                    st.error("ŸÅÿ¥ŸÑ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÇŸäÿØ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™.")
    
    # Display account statement
    st.subheader("üìã ŸÉÿ¥ŸÅ ÿßŸÑÿ≠ÿ≥ÿßÿ®")
    statement = get_account_statement()
    
    if statement:
        df = pd.DataFrame(statement, columns=['ID', 'ÿßŸÑÿ™ÿßÿ±ŸäÿÆ', 'ÿßŸÑŸàÿµŸÅ', 'ŸÖÿØŸäŸÜ', 'ÿØÿßÿ¶ŸÜ', 'ÿßŸÑÿ±ÿµŸäÿØ', 'ŸÜŸàÿπ ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©', 'ÿ±ŸÇŸÖ ÿßŸÑŸÖÿ±ÿ¨ÿπ'])
        st.dataframe(df, use_container_width=True)
    else:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ŸÇŸäŸàÿØ ŸÖÿ≥ÿ¨ŸÑÿ© ÿ®ÿπÿØ.")

if __name__ == "__main__":
    main()
